name: ESBMC verification action
author: Joshua Hines
description: Verifies C and C++ which are either specified or have a git diff, using the ESBMC.

branding:
  color: green
  icon: check-square

inputs:
  esbmc-options:
    description: Options to be used with ESBMC.
    required: false
    default: --incremental-bmc --quiet --color --verbosity 4
  files:
    description: Newline-separated file paths to be used as input for the ESBMC. If none are given, this action will run based off the git diff.
    required: false
    default: ""
  create-artifact:
    description: Whether or not to create an artifact containing ESBMC output files (y/n).
    required: false
    default: n
  artifact-retention-days:
    description: Number of days after which any produced artifacts will expire. Minimum 1 day. Maximum 90 days unless changed from the repository settings page.
    required: false
    default: "0"
  artifact-compression-level:
    description: The level of compression for Zlib to be applied to the artifact archive. Can take values from 0 to 9.
    required: false
    default: "6"
  checkout:
    description: whether or not to automatically checkout the repository (y/n).
    required: false
    default: y
  fail-fast:
    description: whether or not to exit the action and mark it as failed if there is an ESBMC verification failure.
    required: false
    default: n

outputs:
  artifact-id:
    description: The GitHub ID of the created artifact.
    value: ${{ steps.upload-artifact.outputs.artifact-id }}
  artifact-url:
    description: The URL to download the artifact zip files.
    value: ${{ steps.upload-artifact.outputs.artifact-url }}
  

runs:
  using: 'composite'
  steps:
    # Checkout with a fetch-depth of 2 to allow for checking git diff with previous commit.
    - name: checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
      if: ${{ inputs.checkout == 'y' || inputs.checkout == 'Y' }}


    # If files are given as input, check that they exist and exit if they don't.
    - run: |
        echo "----------------------------------------------------"
        echo "Using specified files"
        echo "..."
        while IFS= read -r path || [[ -n "$path" ]]
        do
          if [[ ! -f "$path" ]]; then
            echo "ERROR: The file $path can not be found."
            exit 1
          fi
        done < <(printf '%s' "${{ inputs.files }}")
        echo "Files verified, continuing to install."
      shell: bash
      if: ${{ inputs.files != '' }}



    - run: |
        echo "----------------------------------------------------"
        echo "No files specified. Using git diff."
      shell: bash
      if: ${{ inputs.files == '' }}

    # Get the names of all C and C++ files which have a git diff between the current and previous commit.
    - name: Get Git Diff
      id: get-diff
      run: |
        if [[ $(git rev-list --count HEAD) -le 1 ]]; then
          echo "error: commit depth is less than 2. This could be because no checkout of fetch-depth 2 has occured (make sure that the 'checkout' input is set to 'y') or the current branch has a depth of less than 2."
        fi
        
        echo "FILE_DIFF<<EOF" >> $GITHUB_ENV
        echo "$(git diff --name-only --diff-filter=ACMR HEAD HEAD^ | grep -E '\.c|\.cpp')" >> "$GITHUB_ENV"
        echo "EOF" >> $GITHUB_ENV
      shell: bash
      if: ${{ inputs.files == '' }}

    - run: |
        echo "No git diff in files of the correct type have been detected."
        echo "----------------------------------------------------"
      shell: bash
      if: ${{ env.FILE_DIFF == '' && inputs.files == '' }}



    - name: Install ESBMC Linux
      run: |
        wget -q -O esbmc.zip https://github.com/esbmc/esbmc/releases/download/v7.6.1/release-ubuntu-latest.zip
        unzip -o -q esbmc.zip
        chmod +x $GITHUB_WORKSPACE/bin/esbmc
      shell: bash
      if: ${{ (env.FILE_DIFF != '' || inputs.files != '') && runner.os == 'Linux' }}


    - name: Install ESBMC Windows
      run: |
        choco install -y -r --no-progress ptime
        $client = new-object System.Net.WebClient
        $client.DownloadFile("https://github.com/esbmc/esbmc/releases/download/v7.6.1/release-windows-latest.zip", "$env:GITHUB_WORKSPACE\esbmc.zip")
        unzip -o -q esbmc.zip
        chmod +x $env:GITHUB_WORKSPACE/bin/
      shell: powershell
      if: ${{ (env.FILE_DIFF != '' || inputs.files != '') && runner.os == 'Windows' }}


    # Extract the file name given in the ESBMC options before removing spaces from them and saving them to environment variables.
    - name: Get output file name Linux and Windows
      run: |
        export LANG=C.UTF-8
        shopt -s extglob
        options="${{ inputs.esbmc-options }}"
        if [[ $options =~ "--output-goto" ]]; then
          goto_filename=`echo "$options" | grep -oP "(--output-goto\s+\K[^\']\S*(?=\s*?))|(--output-goto\s+'\K.*(?='))"`
          echo "GOTO_FILENAME=$goto_filename" >> $GITHUB_ENV
          nospace_goto_filename="${goto_filename//+([[:space:]])/}"
          echo "NOSPACE_GOTO_FILENAME=$nospace_goto_filename" >> $GITHUB_ENV
        fi

        if [[ $options =~ "--file-output" ]]; then
          output_filename=`echo "$options" | grep -oP "(--file-output\s+\K[^\']\S*(?=\s*?))|(--file-output\s+'\K.*(?='))"`
          echo "OUTPUT_FILENAME=$output_filename" >> $GITHUB_ENV
          nospace_output_filename="${output_filename//+([[:space:]])/}"
          echo "NOSPACE_OUTPUT_FILENAME=$nospace_output_filename" >> $GITHUB_ENV
        fi

        if [[ $options =~ "--witness-output" ]]; then
          witness_filename=`echo "$options" | grep -oP "(--witness-output\s+\K[^\']\S*(?=\s*?))|(--witness-output\s+'\K.*(?='))"`
          echo "WITNESS_FILENAME=$witness_filename" >> $GITHUB_ENV
          nospace_witness_filename="${witness_filename//+([[:space:]])/}"
          echo "NOSPACE_WITNESS_FILENAME=$nospace_witness_filename" >> $GITHUB_ENV
        fi

        if [[ $options =~ "--generate-html-output" ]]; then
          html_filename=`echo "$options" | grep -oP "(--generate-html-output\s+\K[^\']\S*(?=\s*?))|(--generate-html-output\s+'\K.*(?='))"`
          echo "HTML_FILENAME=$html_filename" >> $GITHUB_ENV
          nospace_html_filename="${html_filename//+([[:space:]])/}"
          echo "NOSPACE_HTML_FILENAME=$nospace_html_filename" >> $GITHUB_ENV
        fi
      shell: bash
      if: ${{ (env.FILE_DIFF != '' || inputs.files != '') && (runner.os == 'Linux' || runner.os == 'Windows') }}


    # Run ESBMC on each C and C++ file given as input or in the FILE_DIFF variable, making uniquely named output files for each ESBMC run if neccessary.
    - name: Run ESBMC Linux
      run: |
        if [[ "${{ inputs.files }}" == '' ]]; then
          run_files="${{ env.FILE_DIFF }}"
        else
          run_files="${{ inputs.files }}"
        fi 
        echo "----------------------------------------------------"
        echo "Running ESBMC for Linux."

        while IFS= read -r path || [[ -n $path ]]
        do
          echo "----------------------------------------------------"
          echo "Running ESBMC on $path"
          if [[ ${{ inputs.fail-fast == 'y' || inputs.fail-fast == 'Y' }} ]]; then
            echo "if"
            \time -f "CPU time: %Us\t\t\tPeak memory usage: %Mkb" $GITHUB_WORKSPACE/bin/esbmc ${{ inputs.esbmc-options }} "$path"
          else
            echo "else"
            \time -f "CPU time: %Us\t\t\tPeak memory usage: %Mkb" $GITHUB_WORKSPACE/bin/esbmc ${{ inputs.esbmc-options }} "$path" || true
          fi

          if [[ -f "$GOTO_FILENAME" ]]; then
            mv "$GOTO_FILENAME" "$path""__""$NOSPACE_GOTO_FILENAME"
          fi

          if [[ -f "$OUTPUT_FILENAME" ]]; then
            mv "$OUTPUT_FILENAME" "$path""__""$NOSPACE_OUTPUT_FILENAME"
          fi

          if [[ -f "$WITNESS_FILENAME" ]]; then
            mv "$WITNESS_FILENAME" "$path""__""$NOSPACE_WITNESS_FILENAME"
          fi

          if [[ -f "$HTML_FILENAME" ]]; then
            mv "$HTML_FILENAME" "$path""__""$NOSPACE_HTML_FILENAME"
          fi
        done < <(printf '%s' "$run_files")
        echo "----------------------------------------------------"
        echo "Finished verifying files."
        echo "----------------------------------------------------"
      shell: bash
      if: ${{ (env.FILE_DIFF != '' || inputs.files != '') && runner.os == 'Linux' }}


    # Run ESBMC on each C and C++ file given as input or in the FILE_DIFF variable, making uniquely named output files for each ESBMC run if neccessary.
    - name: Run ESBMC Windows
      run: |
        if [[ "${{ inputs.files }}" == '' ]]; then
          run_files="${{ env.FILE_DIFF }}"
        else
          run_files="${{ inputs.files }}"
        fi 
        echo "----------------------------------------------------"
        echo "Running ESBMC for Windows."

        while IFS= read -r path || [[ -n $path ]]
        do
          echo "----------------------------------------------------"
          echo "Running ESBMC on $path"
          if [[ ${{ inputs.fail-fast == 'y' || inputs.fail-fast == 'Y' }} ]]; then
            ptime $GITHUB_WORKSPACE/bin/esbmc ${{ inputs.esbmc-options }} "$path"
          else
            ptime $GITHUB_WORKSPACE/bin/esbmc ${{ inputs.esbmc-options }} "$path" || true
          fi

          if [[ -f "$GOTO_FILENAME" ]]; then
            mv "$GOTO_FILENAME" "$path""__""$NOSPACE_GOTO_FILENAME"
          fi

          if [[ -f "$OUTPUT_FILENAME" ]]; then
            mv "$OUTPUT_FILENAME" "$path""__""$NOSPACE_OUTPUT_FILENAME"
          fi

          if [[ -f "$WITNESS_FILENAME" ]]; then
            mv "$WITNESS_FILENAME" "$path""__""$NOSPACE_WITNESS_FILENAME"
          fi

          if [[ -f "$HTML_FILENAME" ]]; then
            mv "$HTML_FILENAME" "$path""__""$NOSPACE_HTML_FILENAME"
          fi
        done < <(printf '%s' "$run_files")
        echo "----------------------------------------------------"
        echo "Finished verifying files."
        echo "----------------------------------------------------"
      shell: bash
      if: ${{ (env.FILE_DIFF != '' || inputs.files != '') && runner.os == 'Windows' }}


    
    - name: Install ESBMC macOS
      run: |
        brew install -q boost gnu-time
        wget -q -O esbmc.zip https://github.com/esbmc/esbmc/releases/download/v7.6/release-macos-latest.zip
        unzip -o -q esbmc.zip
        chmod +x $GITHUB_WORKSPACE/bin/esbmc
      shell: bash
      if: ${{ (env.FILE_DIFF != '' || inputs.files != '') && runner.os == 'macOS' }}


    # Extract the file name given in the ESBMC options before removing spaces from them and saving them to environment variables (macOS).
    # Install grep via Brew to allow for Perl-regex support.
    - name: Get output file name macOS
      run: |
        shopt -s extglob
        if [[ "${{ inputs.esbmc-options }}" =~ "--output-goto" || "${{ inputs.esbmc-options }}" =~ "--file-output" || "${{ inputs.esbmc-options }}" =~ "--witness-output" ]]; then
          brew install -q grep
        fi
        options="${{ inputs.esbmc-options }}"
        if [[ $options =~ "--output-goto" ]]; then
          goto_filename=`echo "$options" | ggrep -oP "(--output-goto\s+\K[^\']\S*(?=\s*?))|(--output-goto\s+'\K.*(?='))"`
          echo "GOTO_FILENAME=$goto_filename" >> $GITHUB_ENV
          nospace_goto_filename="${goto_filename//+([[:space:]])/}"
          echo "NOSPACE_GOTO_FILENAME=$nospace_goto_filename" >> $GITHUB_ENV
        fi

        if [[ $options =~ "--file-output" ]]; then
          output_filename=`echo "$options" | ggrep -oP "(--file-output\s+\K[^\']\S*(?=\s*?))|(--file-output\s+'\K.*(?='))"`
          echo "OUTPUT_FILENAME=$output_filename" >> $GITHUB_ENV
          nospace_output_filename="${output_filename//+([[:space:]])/}"
          echo "NOSPACE_OUTPUT_FILENAME=$nospace_output_filename" >> $GITHUB_ENV
        fi

        if [[ $options =~ "--witness-output" ]]; then
          witness_filename=`echo "$options" | ggrep -oP "(--witness-output\s+\K[^\']\S*(?=\s*?))|(--witness-output\s+'\K.*(?='))"`
          echo "WITNESS_FILENAME=$witness_filename" >> $GITHUB_ENV
          nospace_witness_filename="${witness_filename//+([[:space:]])/}"
          echo "NOSPACE_WITNESS_FILENAME=$nospace_witness_filename" >> $GITHUB_ENV
        fi

        if [[ $options =~ "--generate-html-output" ]]; then
          html_filename=`echo "$options" | ggrep -oP "(--generate-html-output\s+\K[^\']\S*(?=\s*?))|(--generate-html-output\s+'\K.*(?='))"`
          echo "HTML_FILENAME=$html_filename" >> $GITHUB_ENV
          nospace_html_filename="${html_filename//+([[:space:]])/}"
          echo "NOSPACE_HTML_FILENAME=$nospace_html_filename" >> $GITHUB_ENV
        fi
      shell: bash
      if: ${{ (env.FILE_DIFF != '' || inputs.files != '') && runner.os == 'macOS' }}


    # Run ESBMC on each C and C++ file given as input or in the FILE_DIFF variable, making uniquely named output files for each ESBMC run if neccessary (macOS).
    - name: Run ESBMC macOS
      run: |
        if [[ "${{ inputs.files }}" == '' ]]; then
          run_files="${{ env.FILE_DIFF }}"
        else
          run_files="${{ inputs.files }}"
        fi
        echo "----------------------------------------------------"
        echo "Running ESBMC for ${{ runner.os }}."

        while IFS= read -r path || [[ -n $path ]]
        do
          echo "----------------------------------------------------"
          echo "Running ESBMC on $path"
          if [[ ${{ inputs.fail-fast == 'y' || inputs.fail-fast == 'Y' }} ]]; then
            gtime -f "CPU time: %Us\t\t\tPeak memory usage: %Mkb" $GITHUB_WORKSPACE/bin/esbmc --smtlib --smt-formula-only ${{ inputs.esbmc-options }} "$path"
          else
            gtime -f "CPU time: %Us\t\t\tPeak memory usage: %Mkb" $GITHUB_WORKSPACE/bin/esbmc --smtlib --smt-formula-only ${{ inputs.esbmc-options }} "$path" || true
          fi

          if [[ -f "$GOTO_FILENAME" ]]; then
            mv "$GOTO_FILENAME" "$path""__""$NOSPACE_GOTO_FILENAME"
          fi

          if [[ -f "$OUTPUT_FILENAME" ]]; then
            mv "$OUTPUT_FILENAME" "$path""__""$NOSPACE_OUTPUT_FILENAME"
          fi

          if [[ -f "$WITNESS_FILENAME" ]]; then
            mv "$WITNESS_FILENAME" "$path""__""$NOSPACE_WITNESS_FILENAME"
          fi

          if [[ -f "$HTML_FILENAME" ]]; then
            mv "$HTML_FILENAME" "$path""__""$NOSPACE_HTML_FILENAME"
          fi
        done < <(printf '%s' "$run_files")
        echo "----------------------------------------------------"
        echo "Finished verifying files."
        echo "----------------------------------------------------"
      shell: bash
      if: ${{ (env.FILE_DIFF != '' || inputs.files != '') && runner.os == 'macOS' }}    
    


    - name: Upload artifact
      id: upload-artifact
      uses: actions/upload-artifact@v4
      with:
        name: esbmc_output
        path: |
          **/*__${{ env.NOSPACE_GOTO_FILENAME }}
          **/*__${{ env.NOSPACE_OUTPUT_FILENAME }}
          **/*__${{ env.NOSPACE_WITNESS_FILENAME }}
          **/*__${{ env.NOSPACE_HTML_FILENAME }}
        if-no-files-found: warn
        retention-days: ${{ inputs.artifact-retention-days }}
        compression-level: ${{ inputs.artifact-compression-level }}
      if: ${{ (env.FILE_DIFF != '' || inputs.files != '') && (inputs.create-artifact == 'y' || inputs.create-artifact == 'Y') }}
